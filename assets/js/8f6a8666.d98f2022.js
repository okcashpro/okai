"use strict";(self.webpackChunkokai_docs=self.webpackChunkokai_docs||[]).push([[97396],{71837:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"guides/secrets-management","title":"\ud83d\udd10 Secrets Management","description":"A comprehensive guide for managing secrets, API keys, and sensitive configuration in OKai.","source":"@site/docs/guides/secrets-management.md","sourceDirName":"guides","slug":"/guides/secrets-management","permalink":"/okai/docs/guides/secrets-management","draft":false,"unlisted":false,"editUrl":"https://github.com/okcashpro/okai/tree/main/docs/docs/guides/secrets-management.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Usage","permalink":"/okai/docs/guides/advanced"},"next":{"title":"Local Development","permalink":"/okai/docs/guides/local-development"}}');var i=n(74848),s=n(28453);const a={sidebar_position:11},c="\ud83d\udd10 Secrets Management",o={},l=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Secret Types",id:"secret-types",level:3},{value:"Implementation Guide",id:"implementation-guide",level:2},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Character-Specific Secrets",id:"character-specific-secrets",level:3},{value:"Secure Storage",id:"secure-storage",level:3},{value:"Database Secrets",id:"database-secrets",level:4},{value:"Wallet Management",id:"wallet-management",level:4},{value:"Secret Rotation",id:"secret-rotation",level:3},{value:"Access Control",id:"access-control",level:3},{value:"Encryption at Rest",id:"encryption-at-rest",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Environment Segregation",id:"1-environment-segregation",level:3},{value:"2. Git Security",id:"2-git-security",level:3},{value:"3. Secret Validation",id:"3-secret-validation",level:3},{value:"4. Error Handling",id:"4-error-handling",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"1. Handling API Keys",id:"1-handling-api-keys",level:3},{value:"2. Secure Configuration Loading",id:"2-secure-configuration-loading",level:3},{value:"3. Memory Security",id:"3-memory-security",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Related Resources",id:"related-resources",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"-secrets-management",children:"\ud83d\udd10 Secrets Management"})}),"\n",(0,i.jsx)(r.p,{children:"A comprehensive guide for managing secrets, API keys, and sensitive configuration in OKai."}),"\n",(0,i.jsx)(r.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(r.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(r.p,{children:"OKai uses a hierarchical environment variable system:"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"Character-specific secrets (highest priority)"}),"\n",(0,i.jsx)(r.li,{children:"Environment variables"}),"\n",(0,i.jsx)(r.li,{children:"Default values (lowest priority)"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"secret-types",children:"Secret Types"}),"\n",(0,i.jsx)(r.p,{children:"Common secrets you'll need to manage:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"# API Keys\r\nOPENAI_API_KEY=sk-*\r\nANTHROPIC_API_KEY=your-key\r\nELEVENLABS_XI_API_KEY=your-key\r\nGOOGLE_GENERATIVE_AI_API_KEY=your-key\r\n\r\n# Client Authentication\r\nDISCORD_API_TOKEN=your-token\r\nTELEGRAM_BOT_TOKEN=your-token\r\n\r\n# Database Credentials\r\nSUPABASE_URL=your-url\r\nSUPABASE_SERVICE_API_KEY=your-key\r\n\r\n# EVM\r\nEVM_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\r\n\r\n# Solana\r\nSOLANA_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\r\nSOLANA_PUBLIC_KEY=EXAMPLE_WALLET_PUBLIC_KEY\r\n\r\n# Fallback Wallet Configuration (deprecated)\r\nWALLET_PRIVATE_KEY=EXAMPLE_WALLET_PRIVATE_KEY\r\nWALLET_PUBLIC_KEY=EXAMPLE_WALLET_PUBLIC_KEY\n"})}),"\n",(0,i.jsx)(r.h2,{id:"implementation-guide",children:"Implementation Guide"}),"\n",(0,i.jsx)(r.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Create a ",(0,i.jsx)(r.code,{children:".env"})," file from template:"]}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"cp .env.example .env\n"})}),"\n",(0,i.jsxs)(r.ol,{start:"2",children:["\n",(0,i.jsx)(r.li,{children:"Configure environment discovery:"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'import { config } from "dotenv";\r\nimport path from "path";\r\n\r\nexport function findNearestEnvFile(startDir = process.cwd()) {\r\n  let currentDir = startDir;\r\n\r\n  while (currentDir !== path.parse(currentDir).root) {\r\n    const envPath = path.join(currentDir, ".env");\r\n\r\n    if (fs.existsSync(envPath)) {\r\n      return envPath;\r\n    }\r\n\r\n    currentDir = path.dirname(currentDir);\r\n  }\r\n\r\n  return null;\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"character-specific-secrets",children:"Character-Specific Secrets"}),"\n",(0,i.jsx)(r.p,{children:"Define secrets in character files:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\r\n  "name": "TradingBot",\r\n  "settings": {\r\n    "secrets": {\r\n      "OPENAI_API_KEY": "character-specific-key",\r\n      "WALLET_PRIVATE_KEY": "character-specific-wallet"\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(r.p,{children:"Access secrets in code:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'const apiKey = runtime.getSetting("OPENAI_API_KEY");\n'})}),"\n",(0,i.jsx)(r.h3,{id:"secure-storage",children:"Secure Storage"}),"\n",(0,i.jsx)(r.h4,{id:"database-secrets",children:"Database Secrets"}),"\n",(0,i.jsx)(r.p,{children:"Use encrypted connection strings:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"class SecureDatabase {\r\n  private connection: Connection;\r\n\r\n  constructor(encryptedConfig: string) {\r\n    const config = this.decryptConfig(encryptedConfig);\r\n    this.connection = new Connection(config);\r\n  }\r\n\r\n  private decryptConfig(encrypted: string): DatabaseConfig {\r\n    // Implement decryption logic\r\n    return JSON.parse(decrypted);\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(r.h4,{id:"wallet-management",children:"Wallet Management"}),"\n",(0,i.jsx)(r.p,{children:"Secure handling of blockchain credentials:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'class WalletManager {\r\n  private async initializeWallet(runtime: IAgentRuntime) {\r\n    const privateKey =\r\n      runtime.getSetting("SOLANA_PRIVATE_KEY") ??\r\n      runtime.getSetting("WALLET_PRIVATE_KEY");\r\n\r\n    if (!privateKey) {\r\n      throw new Error("Wallet private key not configured");\r\n    }\r\n\r\n    // Validate key format\r\n    try {\r\n      const keyBuffer = Buffer.from(privateKey, "base64");\r\n      if (keyBuffer.length !== 64) {\r\n        throw new Error("Invalid key length");\r\n      }\r\n    } catch (error) {\r\n      throw new Error("Invalid private key format");\r\n    }\r\n\r\n    // Initialize wallet securely\r\n    return new Wallet(privateKey);\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"secret-rotation",children:"Secret Rotation"}),"\n",(0,i.jsx)(r.p,{children:"Implement automatic secret rotation:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"class SecretRotation {\r\n  private static readonly SECRET_LIFETIME = 90 * 24 * 60 * 60 * 1000; // 90 days\r\n\r\n  async shouldRotateSecret(secretName: string): Promise<boolean> {\r\n    const lastRotation = await this.getLastRotation(secretName);\r\n    return Date.now() - lastRotation > SecretRotation.SECRET_LIFETIME;\r\n  }\r\n\r\n  async rotateSecret(secretName: string): Promise<void> {\r\n    // Implement rotation logic\r\n    const newSecret = await this.generateNewSecret();\r\n    await this.updateSecret(secretName, newSecret);\r\n    await this.recordRotation(secretName);\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"access-control",children:"Access Control"}),"\n",(0,i.jsx)(r.p,{children:"Implement proper access controls:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'class SecretAccess {\r\n  private static readonly ALLOWED_KEYS = [\r\n    "OPENAI_API_KEY",\r\n    "DISCORD_TOKEN",\r\n    // ... other allowed keys\r\n  ];\r\n\r\n  static validateAccess(key: string): boolean {\r\n    return this.ALLOWED_KEYS.includes(key);\r\n  }\r\n\r\n  static async getSecret(\r\n    runtime: IAgentRuntime,\r\n    key: string,\r\n  ): Promise<string | null> {\r\n    if (!this.validateAccess(key)) {\r\n      throw new Error(`Unauthorized access to secret: ${key}`);\r\n    }\r\n\r\n    return runtime.getSetting(key);\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"encryption-at-rest",children:"Encryption at Rest"}),"\n",(0,i.jsx)(r.p,{children:"Implement encryption for stored secrets:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'import { createCipheriv, createDecipheriv } from "crypto";\r\n\r\nclass SecretEncryption {\r\n  static async encrypt(value: string, key: Buffer): Promise<string> {\r\n    const iv = crypto.randomBytes(16);\r\n    const cipher = createCipheriv("aes-256-gcm", key, iv);\r\n\r\n    let encrypted = cipher.update(value, "utf8", "hex");\r\n    encrypted += cipher.final("hex");\r\n\r\n    return JSON.stringify({\r\n      iv: iv.toString("hex"),\r\n      encrypted,\r\n      tag: cipher.getAuthTag().toString("hex"),\r\n    });\r\n  }\r\n\r\n  static async decrypt(encrypted: string, key: Buffer): Promise<string> {\r\n    const { iv, encrypted: encryptedData, tag } = JSON.parse(encrypted);\r\n\r\n    const decipher = createDecipheriv(\r\n      "aes-256-gcm",\r\n      key,\r\n      Buffer.from(iv, "hex"),\r\n    );\r\n\r\n    decipher.setAuthTag(Buffer.from(tag, "hex"));\r\n\r\n    let decrypted = decipher.update(encryptedData, "hex", "utf8");\r\n    decrypted += decipher.final("utf8");\r\n\r\n    return decrypted;\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(r.h3,{id:"1-environment-segregation",children:"1. Environment Segregation"}),"\n",(0,i.jsx)(r.p,{children:"Maintain separate environment files:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:".env.development    # Local development settings\r\n.env.staging       # Staging environment\r\n.env.production    # Production settings\n"})}),"\n",(0,i.jsx)(r.h3,{id:"2-git-security",children:"2. Git Security"}),"\n",(0,i.jsx)(r.p,{children:"Exclude sensitive files:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-gitignore",children:"# .gitignore\r\n.env\r\n.env.*\r\ncharacters/**/secrets.json\r\n**/serviceAccount.json\n"})}),"\n",(0,i.jsx)(r.h3,{id:"3-secret-validation",children:"3. Secret Validation"}),"\n",(0,i.jsx)(r.p,{children:"Validate secrets before use:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'async function validateSecrets(character: Character): Promise<void> {\r\n  const required = ["OPENAI_API_KEY"];\r\n  const missing = required.filter((key) => !character.settings.secrets[key]);\r\n\r\n  if (missing.length > 0) {\r\n    throw new Error(`Missing required secrets: ${missing.join(", ")}`);\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"4-error-handling",children:"4. Error Handling"}),"\n",(0,i.jsx)(r.p,{children:"Secure error messages:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'try {\r\n  await loadSecrets();\r\n} catch (error) {\r\n  if (error.code === "ENOENT") {\r\n    console.error("Environment file not found");\r\n  } else if (error instanceof ValidationError) {\r\n    console.error("Invalid secret format");\r\n  } else {\r\n    // Log securely without exposing secret values\r\n    console.error("Error loading secrets");\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsx)(r.h3,{id:"1-handling-api-keys",children:"1. Handling API Keys"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'class APIKeyManager {\r\n  private validateAPIKey(key: string): boolean {\r\n    if (key.startsWith("sk-")) {\r\n      return key.length > 20;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async rotateAPIKey(provider: string): Promise<void> {\r\n    // Implement key rotation logic\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"2-secure-configuration-loading",children:"2. Secure Configuration Loading"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'class ConfigLoader {\r\n  private static sanitizePath(path: string): boolean {\r\n    return !path.includes("../") && !path.startsWith("/");\r\n  }\r\n\r\n  async loadConfig(path: string): Promise<Config> {\r\n    if (!this.sanitizePath(path)) {\r\n      throw new Error("Invalid config path");\r\n    }\r\n    // Load configuration\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"3-memory-security",children:"3. Memory Security"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"class SecureMemory {\r\n  private secrets: Map<string, WeakRef<string>> = new Map();\r\n\r\n  set(key: string, value: string): void {\r\n    this.secrets.set(key, new WeakRef(value));\r\n  }\r\n\r\n  get(key: string): string | null {\r\n    const ref = this.secrets.get(key);\r\n    return ref?.deref() ?? null;\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(r.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"Missing Secrets"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'if (!process.env.OPENAI_API_KEY) {\r\n  throw new Error(\r\n    "OpenAI API key not found in environment or character settings",\r\n  );\r\n}\n'})}),"\n",(0,i.jsxs)(r.ol,{start:"2",children:["\n",(0,i.jsx)(r.li,{children:"Invalid Secret Format"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"function validateApiKey(key: string): boolean {\r\n  // OpenAI keys start with 'sk-'\r\n  if (key.startsWith(\"sk-\")) {\r\n    return key.length > 20;\r\n  }\r\n  return false;\r\n}\n"})}),"\n",(0,i.jsxs)(r.ol,{start:"3",children:["\n",(0,i.jsx)(r.li,{children:"Secret Loading Errors"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'try {\r\n  await loadSecrets();\r\n} catch (error) {\r\n  if (error.response) {\r\n    console.error("Response data:", error.response.data);\r\n    console.error("Response status:", error.response.status);\r\n  } else if (error.request) {\r\n    console.error("No response received:", error.request);\r\n  } else {\r\n    console.error("Error setting up request:", error.message);\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/okai/docs/guides/configuration",children:"Configuration Guide"})," for general setup"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/okai/docs/guides/local-development",children:"Local Development"})," for development environment"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/okai/docs/advanced/infrastructure",children:"Infrastructure Guide"})," for deployment security"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>c});var t=n(96540);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);