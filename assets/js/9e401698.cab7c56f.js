"use strict";(self.webpackChunkokai_docs=self.webpackChunkokai_docs||[]).push([[29047],{68171:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Discord/development/dev-contributors/chat_2024-12-07","title":"dev-contributors 2024-12-07","description":"Summary","source":"@site/community/Discord/development/dev-contributors/chat_2024-12-07.md","sourceDirName":"Discord/development/dev-contributors","slug":"/Discord/development/dev-contributors/chat_2024-12-07","permalink":"/okai/community/Discord/development/dev-contributors/chat_2024-12-07","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"dev-contributors 2024-12-06","permalink":"/okai/community/Discord/development/dev-contributors/chat_2024-12-06"},"next":{"title":"dev-contributors 2024-12-08","permalink":"/okai/community/Discord/development/dev-contributors/chat_2024-12-08"}}');var o=i(74848),s=i(28453);const r={},a="dev-contributors 2024-12-07",c={},l=[{value:"Summary",id:"summary",level:2},{value:"FAQ",id:"faq",level:2},{value:"Who Helped Who",id:"who-helped-who",level:2},{value:"Action Items",id:"action-items",level:2},{value:"Technical Tasks",id:"technical-tasks",level:3},{value:"Feature Requests",id:"feature-requests",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"dev-contributors-2024-12-07",children:"dev-contributors 2024-12-07"})}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(n.p,{children:["The main technical discussion revolved around implementing a generic way to integrate 'langfuse' into various branches. The proposed solution is creating character config files that declare desired plugins, with checks for ",(0,o.jsx)(n.code,{children:"environment.ts"})," file existence in each of them."]}),"\n",(0,o.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"What is the correct syntax for declaring plugins in character config files? Error messages are thrown when an object rather than a string is expected. (asked by @Yoni (09:06))"}),"\n",(0,o.jsx)(n.li,{children:"Should we have both options of specifying bootstrap and node plugin directly, as well as loading additional ones from configuration? (asked by @Galego)"}),"\n",(0,o.jsxs)(n.li,{children:["Could character config files define the plugins to use? Should there be a function checking these for an ",(0,o.jsx)(n.code,{children:"environment.ts"})," file and variable values within it? (asked by @Agent Joshua \u20b1 (08:35))"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"who-helped-who",children:"Who Helped Who"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"helped @Yoni with Discussing the implementation of langfuse integration and plugin configuration by providing @Agent Joshua \u20b1 (08:35)"}),"\n",(0,o.jsx)(n.li,{children:"[Galego] helped [cygaar] with Improving plugin specification method by providing Galego provided a suggestion for initializing plugins in runtime files and mapping user inputs."}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"21:53",children:"Neodotneo"})," helped ",(0,o.jsx)(n.a,{href:"14:20-14:21",children:"Galego"})," with Improving plugin consistency by providing Suggested creating separate file for each action and standardizing input"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"action-items",children:"Action Items"}),"\n",(0,o.jsx)(n.h3,{id:"technical-tasks",children:"Technical Tasks"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Implement langfuse integration as a service (mentioned by @Yoni)"}),"\n",(0,o.jsx)(n.li,{children:"Implement a better way to specify plugins using JSON files (mentioned by [cygaar, Galego])"}),"\n",(0,o.jsxs)(n.li,{children:["Create separate file for each action with standardized input (mentioned by ",(0,o.jsx)(n.a,{href:"21:53",children:"Neodotneo"}),")"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"feature-requests",children:"Feature Requests"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Create character config file to declare desired plugins and check for ",(0,o.jsx)(n.code,{children:"environment.ts"})," files. (mentioned by @Agent Joshua \u20b1)"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(96540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);