"use strict";(self.webpackChunkokai_docs=self.webpackChunkokai_docs||[]).push([[24163],{50620:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"packages/adapters","title":"\ud83d\udd27 Database Adapters","description":"Overview","source":"@site/docs/packages/adapters.md","sourceDirName":"packages","slug":"/packages/adapters","permalink":"/okai/docs/packages/adapters","draft":false,"unlisted":false,"editUrl":"https://github.com/okcashpro/okai/tree/main/docs/docs/packages/adapters.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Core Package","permalink":"/okai/docs/packages/core"},"next":{"title":"Client Packages","permalink":"/okai/docs/packages/clients"}}');var s=n(74848),t=n(28453);const i={sidebar_position:1},o="\ud83d\udd27 Database Adapters",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Available Adapters",id:"available-adapters",level:3},{value:"Architecture Overview",id:"architecture-overview",level:3},{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"PostgreSQL Setup",id:"postgresql-setup",level:3},{value:"SQLite Setup",id:"sqlite-setup",level:3},{value:"Supabase Setup",id:"supabase-setup",level:3},{value:"Core Features",id:"core-features",level:2},{value:"Memory Operations",id:"memory-operations",level:3},{value:"Relationship Management",id:"relationship-management",level:3},{value:"Goal Management",id:"goal-management",level:3},{value:"Room &amp; Participant Management",id:"room--participant-management",level:3},{value:"Vector Search Implementation",id:"vector-search-implementation",level:2},{value:"PostgreSQL (with pgvector)",id:"postgresql-with-pgvector",level:3},{value:"SQLite (with sqlite-vss)",id:"sqlite-with-sqlite-vss",level:3},{value:"Schema Management",id:"schema-management",level:2},{value:"PostgreSQL Schema",id:"postgresql-schema",level:3},{value:"SQLite Schema",id:"sqlite-schema",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Connection Pooling",id:"connection-pooling",level:3},{value:"Prepared Statements",id:"prepared-statements",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Extension Points",id:"extension-points",level:2},{value:"Custom Adapter Implementation",id:"custom-adapter-implementation",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Resources",id:"related-resources",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"-database-adapters",children:"\ud83d\udd27 Database Adapters"})}),"\n",(0,s.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(r.p,{children:"Database Adapters provide OKai's persistence layer, enabling storage and retrieval of memories, relationships, goals, and other data through a unified interface. The system supports multiple database backends:"}),"\n",(0,s.jsx)(r.h3,{id:"available-adapters",children:"Available Adapters"}),"\n",(0,s.jsx)(r.p,{children:"Each adapter is optimized for different use cases:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"PostgreSQL"})," (",(0,s.jsx)(r.code,{children:"@okcashpro/adapter-postgres"}),")"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Production-ready with vector search"}),"\n",(0,s.jsx)(r.li,{children:"Connection pooling and high performance"}),"\n",(0,s.jsx)(r.li,{children:"JSONB and pgvector support"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"SQLite"})," (",(0,s.jsx)(r.code,{children:"@okcashpro/adapter-sqlite"}),")"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Lightweight local development"}),"\n",(0,s.jsx)(r.li,{children:"No external dependencies"}),"\n",(0,s.jsx)(r.li,{children:"Full-text search capabilities"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Supabase"})," (",(0,s.jsx)(r.code,{children:"@okcashpro/adapter-supabase"}),")"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Cloud-native PostgreSQL"}),"\n",(0,s.jsx)(r.li,{children:"Real-time subscriptions"}),"\n",(0,s.jsx)(r.li,{children:"Built-in RPC functions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"SQL.js"})," (",(0,s.jsx)(r.code,{children:"@okcashpro/adapter-sqljs"}),")"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"In-memory SQLite for testing"}),"\n",(0,s.jsx)(r.li,{children:"Browser compatibility"}),"\n",(0,s.jsx)(r.li,{children:"Zero configuration"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,s.jsx)(r.p,{children:"OKai's database adapters provide a unified interface for data persistence across different storage backends. The following diagram shows how adapters integrate with the system:"}),"\n",(0,s.jsx)(r.mermaid,{value:"classDiagram\r\n    class DatabaseAdapter {\r\n        <<abstract>>\r\n        +getRoom(roomId: UUID)\r\n        +createMemory(memory: Memory)\r\n        +searchMemories(params: SearchParams)\r\n        +getGoals(params: GoalParams)\r\n        +createRelationship(params: RelationshipParams)\r\n    }\r\n\r\n    class PostgresDatabaseAdapter {\r\n        -pool: Pool\r\n        +searchMemoriesByEmbedding()\r\n        +createMemory()\r\n        +testConnection()\r\n    }\r\n\r\n    class SqliteDatabaseAdapter {\r\n        -db: Database\r\n        +searchMemoriesByEmbedding()\r\n        +createMemory()\r\n        +prepareStatements()\r\n    }\r\n\r\n    class SupabaseDatabaseAdapter {\r\n        -supabase: SupabaseClient\r\n        +searchMemoriesByEmbedding()\r\n        +createMemory()\r\n        +rpcCalls()\r\n    }\r\n\r\n    class SqlJsDatabaseAdapter {\r\n        -db: Database\r\n        +searchMemoriesByEmbedding()\r\n        +createMemory()\r\n        +inMemoryOperations()\r\n    }\r\n\r\n    DatabaseAdapter <|-- PostgresDatabaseAdapter\r\n    DatabaseAdapter <|-- SqliteDatabaseAdapter\r\n    DatabaseAdapter <|-- SupabaseDatabaseAdapter\r\n    DatabaseAdapter <|-- SqlJsDatabaseAdapter\r\n\r\n    class AgentRuntime {\r\n        -databaseAdapter: DatabaseAdapter\r\n        +memoryManager: MemoryManager\r\n        +messageManager: MemoryManager\r\n    }\r\n\r\n    class MemoryManager {\r\n        -runtime: AgentRuntime\r\n        -tableName: string\r\n        +createMemory()\r\n        +searchMemories()\r\n    }\r\n\r\n    AgentRuntime --\x3e DatabaseAdapter : uses\r\n    AgentRuntime --\x3e MemoryManager : contains\r\n    MemoryManager --\x3e DatabaseAdapter : uses\r\n\r\n    class Memory {\r\n        +id: UUID\r\n        +content: Content\r\n        +embedding: number[]\r\n        +userId: UUID\r\n        +roomId: UUID\r\n    }\r\n\r\n    class Goal {\r\n        +id: UUID\r\n        +name: string\r\n        +status: GoalStatus\r\n        +objectives: Objective[]\r\n    }\r\n\r\n    class Relationship {\r\n        +userA: UUID\r\n        +userB: UUID\r\n        +status: string\r\n    }\r\n\r\n    DatabaseAdapter .. Memory : manages\r\n    DatabaseAdapter .. Goal : manages\r\n    DatabaseAdapter .. Relationship : manages"}),"\n",(0,s.jsx)(r.p,{children:"Key components:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"DatabaseAdapter"}),": Abstract base class defining the interface"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Concrete Adapters"}),": PostgreSQL, SQLite, Supabase, and SQL.js implementations"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Memory Management"}),": Integration with MemoryManager for data operations"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Data Models"}),": Memory, Goal, and Relationship data structures"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"# PostgreSQL\r\npnpm add @okcashpro/adapter-postgres pg\r\n\r\n# SQLite\r\npnpm add @okcashpro/adapter-sqlite better-sqlite3\r\n\r\n# SQL.js\r\npnpm add @okcashpro/adapter-sqljs sql.js\r\n\r\n# Supabase\r\npnpm add @okcashpro/adapter-supabase @supabase/supabase-js\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(r.h3,{id:"postgresql-setup",children:"PostgreSQL Setup"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { PostgresDatabaseAdapter } from "@okcashpro/adapter-postgres";\r\n\r\nconst db = new PostgresDatabaseAdapter({\r\n  connectionString: process.env.DATABASE_URL,\r\n  max: 20, // Connection pool size\r\n  idleTimeoutMillis: 30000,\r\n  connectionTimeoutMillis: 2000,\r\n});\r\n\r\n// Test connection\r\nawait db.testConnection();\n'})}),"\n",(0,s.jsx)(r.h3,{id:"sqlite-setup",children:"SQLite Setup"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { SqliteDatabaseAdapter } from "@okcashpro/adapter-sqlite";\r\nimport Database from "better-sqlite3";\r\n\r\nconst db = new SqliteDatabaseAdapter(\r\n  new Database("./db.sqlite", {\r\n    // SQLite options\r\n    memory: false,\r\n    readonly: false,\r\n    fileMustExist: false,\r\n  }),\r\n);\n'})}),"\n",(0,s.jsx)(r.h3,{id:"supabase-setup",children:"Supabase Setup"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { SupabaseDatabaseAdapter } from "@okcashpro/adapter-supabase";\r\n\r\nconst db = new SupabaseDatabaseAdapter(\r\n  process.env.SUPABASE_URL!,\r\n  process.env.SUPABASE_ANON_KEY!,\r\n);\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"core-features",children:"Core Features"}),"\n",(0,s.jsx)(r.h3,{id:"memory-operations",children:"Memory Operations"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'// Create memory\r\nawait db.createMemory({\r\n  id: uuid(),\r\n  type: "messages",\r\n  content: {\r\n    text: "Hello world",\r\n    attachments: [],\r\n  },\r\n  embedding: new Float32Array(1536), // Embedding vector\r\n  userId,\r\n  roomId,\r\n  agentId,\r\n  createdAt: Date.now(),\r\n  unique: true,\r\n});\r\n\r\n// Search by embedding\r\nconst memories = await db.searchMemories({\r\n  tableName: "messages",\r\n  roomId,\r\n  embedding: vectorData,\r\n  match_threshold: 0.8,\r\n  match_count: 10,\r\n  unique: true,\r\n});\r\n\r\n// Get recent memories\r\nconst recent = await db.getMemories({\r\n  roomId,\r\n  count: 10,\r\n  unique: true,\r\n  tableName: "messages",\r\n  start: startTime,\r\n  end: endTime,\r\n});\n'})}),"\n",(0,s.jsx)(r.h3,{id:"relationship-management",children:"Relationship Management"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// Create relationship\r\nawait db.createRelationship({\r\n  userA: user1Id,\r\n  userB: user2Id,\r\n});\r\n\r\n// Get relationship\r\nconst relationship = await db.getRelationship({\r\n  userA: user1Id,\r\n  userB: user2Id,\r\n});\r\n\r\n// Get all relationships\r\nconst relationships = await db.getRelationships({\r\n  userId: user1Id,\r\n});\n"})}),"\n",(0,s.jsx)(r.h3,{id:"goal-management",children:"Goal Management"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'// Create goal\r\nawait db.createGoal({\r\n  id: uuid(),\r\n  roomId,\r\n  userId,\r\n  name: "Complete task",\r\n  status: GoalStatus.IN_PROGRESS,\r\n  objectives: [\r\n    { text: "Step 1", completed: false },\r\n    { text: "Step 2", completed: false },\r\n  ],\r\n});\r\n\r\n// Update goal status\r\nawait db.updateGoalStatus({\r\n  goalId,\r\n  status: GoalStatus.COMPLETED,\r\n});\r\n\r\n// Get active goals\r\nconst goals = await db.getGoals({\r\n  roomId,\r\n  userId,\r\n  onlyInProgress: true,\r\n  count: 10,\r\n});\n'})}),"\n",(0,s.jsx)(r.h3,{id:"room--participant-management",children:"Room & Participant Management"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// Create room\r\nconst roomId = await db.createRoom();\r\n\r\n// Add participant\r\nawait db.addParticipant(userId, roomId);\r\n\r\n// Get participants\r\nconst participants = await db.getParticipantsForRoom(roomId);\r\n\r\n// Get rooms for participant\r\nconst rooms = await db.getRoomsForParticipant(userId);\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"vector-search-implementation",children:"Vector Search Implementation"}),"\n",(0,s.jsx)(r.h3,{id:"postgresql-with-pgvector",children:"PostgreSQL (with pgvector)"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'// PostgreSQL vector search\r\nasync searchMemoriesByEmbedding(\r\n  embedding: number[],\r\n  params: {\r\n    match_threshold?: number;\r\n    count?: number;\r\n    roomId?: UUID;\r\n    unique?: boolean;\r\n    tableName: string;\r\n  }\r\n): Promise<Memory[]> {\r\n  const client = await this.pool.connect();\r\n  try {\r\n    let sql = `\r\n      SELECT *,\r\n      1 - (embedding <-> $1::vector) as similarity\r\n      FROM memories\r\n      WHERE type = $2\r\n    `;\r\n\r\n    const values: any[] = [\r\n      `[${embedding.join(",")}]`,\r\n      params.tableName\r\n    ];\r\n\r\n    if (params.unique) {\r\n      sql += ` AND "unique" = true`;\r\n    }\r\n\r\n    if (params.roomId) {\r\n      sql += ` AND "roomId" = $3::uuid`;\r\n      values.push(params.roomId);\r\n    }\r\n\r\n    if (params.match_threshold) {\r\n      sql += ` AND 1 - (embedding <-> $1::vector) >= $4`;\r\n      values.push(params.match_threshold);\r\n    }\r\n\r\n    sql += ` ORDER BY embedding <-> $1::vector`;\r\n\r\n    if (params.count) {\r\n      sql += ` LIMIT $5`;\r\n      values.push(params.count);\r\n    }\r\n\r\n    const { rows } = await client.query(sql, values);\r\n    return rows.map(row => ({\r\n      ...row,\r\n      content: typeof row.content === "string"\r\n        ? JSON.parse(row.content)\r\n        : row.content,\r\n      similarity: row.similarity\r\n    }));\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"sqlite-with-sqlite-vss",children:"SQLite (with sqlite-vss)"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'// SQLite vector search implementation\r\nasync searchMemories(params: {\r\n  tableName: string;\r\n  roomId: UUID;\r\n  embedding: number[];\r\n  match_threshold: number;\r\n  match_count: number;\r\n  unique: boolean;\r\n}): Promise<Memory[]> {\r\n  const queryParams = [\r\n    new Float32Array(params.embedding),\r\n    params.tableName,\r\n    params.roomId,\r\n    params.match_count\r\n  ];\r\n\r\n  let sql = `\r\n    SELECT *, vec_distance_L2(embedding, ?) AS similarity\r\n    FROM memories\r\n    WHERE type = ?\r\n  `;\r\n\r\n  if (params.unique) {\r\n    sql += " AND `unique` = 1";\r\n  }\r\n\r\n  sql += ` ORDER BY similarity ASC LIMIT ?`;\r\n\r\n  const memories = this.db.prepare(sql).all(...queryParams);\r\n\r\n  return memories.map(memory => ({\r\n    ...memory,\r\n    content: JSON.parse(memory.content),\r\n    similarity: memory.similarity\r\n  }));\r\n}\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"schema-management",children:"Schema Management"}),"\n",(0,s.jsx)(r.h3,{id:"postgresql-schema",children:"PostgreSQL Schema"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sql",children:'CREATE EXTENSION IF NOT EXISTS vector;\r\n\r\nCREATE TABLE IF NOT EXISTS accounts (\r\n    id UUID PRIMARY KEY,\r\n    "createdAt" DEFAULT CURRENT_TIMESTAMP,\r\n    "name" TEXT,\r\n    "username" TEXT,\r\n    "email" TEXT NOT NULL,\r\n    "avatarUrl" TEXT,\r\n    "details" JSONB DEFAULT \'{}\'::"jsonb",\r\n    "is_agent" BOOLEAN DEFAULT false NOT NULL,\r\n    "location" TEXT,\r\n    "profile_line" TEXT,\r\n    "signed_tos" BOOLEAN DEFAULT false NOT NULL\r\n);\r\n\r\nALTER TABLE ONLY accounts ADD CONSTRAINT users_email_key UNIQUE (email);\r\n\r\nCREATE TABLE IF NOT EXISTS participants (\r\n    "id" UUID PRIMARY KEY,\r\n    "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,\r\n    "userId" UUID REFERENCES accounts(id),\r\n    "roomId" UUID REFERENCES rooms(id),\r\n    "userState" TEXT,  -- For MUTED, NULL, or FOLLOWED states\r\n    "last_message_read" UUID\r\n);\r\n\r\nALTER TABLE ONLY participants ADD CONSTRAINT participants_id_key UNIQUE (id);\r\nALTER TABLE ONLY participants ADD CONSTRAINT participants_roomId_fkey FOREIGN KEY ("roomId") REFERENCES rooms(id);\r\nALTER TABLE ONLY participants ADD CONSTRAINT participants_userId_fkey FOREIGN KEY ("userId") REFERENCES accounts(id);\r\n\r\nCREATE TABLE rooms (\r\n  id UUID PRIMARY KEY,\r\n  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\nCREATE TABLE memories (\r\n  id UUID PRIMARY KEY,\r\n  type TEXT NOT NULL,\r\n  content JSONB NOT NULL,\r\n  embedding vector(1536),\r\n  "userId" UUID NOT NULL,\r\n  "roomId" UUID NOT NULL,\r\n  "agentId" UUID NOT NULL,\r\n  "unique" BOOLEAN DEFAULT FALSE,\r\n  "createdAt" TIMESTAMP NOT NULL\r\n);\r\n\r\nALTER TABLE ONLY memories ADD CONSTRAINT memories_roomId_fkey FOREIGN KEY ("roomId") REFERENCES rooms(id);\r\nALTER TABLE ONLY memories ADD CONSTRAINT memories_userId_fkey FOREIGN KEY ("userId") REFERENCES accounts(id);\r\n\r\nCREATE INDEX memory_embedding_idx ON\r\n  memories USING ivfflat (embedding vector_cosine_ops)\r\n  WITH (lists = 100);\r\n\r\nCREATE TABLE relationships (\r\n  id UUID PRIMARY KEY,\r\n  "userA" UUID NOT NULL,\r\n  "userB" UUID NOT NULL,\r\n  status TEXT DEFAULT \'ACTIVE\',\r\n  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\nALTER TABLE ONLY relationships ADD CONSTRAINT friendships_id_key UNIQUE (id);\r\nALTER TABLE ONLY relationships ADD CONSTRAINT relationships_userA_fkey FOREIGN KEY ("userA") REFERENCES accounts(id);\r\nALTER TABLE ONLY relationships ADD CONSTRAINT relationships_userB_fkey FOREIGN KEY ("userB") REFERENCES accounts(id);\r\nALTER TABLE ONLY relationships ADD CONSTRAINT relationships_userId_fkey FOREIGN KEY ("userId") REFERENCES accounts(id);\r\n\r\nCREATE TABLE goals (\r\n  id UUID PRIMARY KEY,\r\n  "roomId" UUID NOT NULL,\r\n  "userId" UUID,\r\n  name TEXT NOT NULL,\r\n  status TEXT NOT NULL,\r\n  objectives JSONB NOT NULL,\r\n  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\n'})}),"\n",(0,s.jsx)(r.h3,{id:"sqlite-schema",children:"SQLite Schema"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'const sqliteTables = `\r\nCREATE TABLE IF NOT EXISTS memories (\r\n  id TEXT PRIMARY KEY,\r\n  type TEXT NOT NULL,\r\n  content TEXT NOT NULL,\r\n  embedding BLOB,\r\n  userId TEXT NOT NULL,\r\n  roomId TEXT NOT NULL,\r\n  agentId TEXT NOT NULL,\r\n  "unique" INTEGER DEFAULT 0,\r\n  createdAt INTEGER NOT NULL\r\n);\r\n\r\nCREATE VIRTUAL TABLE IF NOT EXISTS memory_fts\r\n  USING fts5(content, content_rowid=id);\r\n\r\nCREATE TABLE IF NOT EXISTS goals (\r\n  id TEXT PRIMARY KEY,\r\n  roomId TEXT NOT NULL,\r\n  userId TEXT,\r\n  name TEXT NOT NULL,\r\n  status TEXT NOT NULL,\r\n  objectives TEXT NOT NULL,\r\n  createdAt INTEGER DEFAULT (unixepoch())\r\n);\r\n`;\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(r.h3,{id:"connection-pooling",children:"Connection Pooling"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'// PostgreSQL connection pool\r\nconstructor(connectionConfig: any) {\r\n  super();\r\n  this.pool = new Pool({\r\n    ...connectionConfig,\r\n    max: 20,\r\n    idleTimeoutMillis: 30000,\r\n    connectionTimeoutMillis: 2000\r\n  });\r\n\r\n  this.pool.on("error", (err) => {\r\n    console.error("Unexpected error on idle client", err);\r\n  });\r\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"prepared-statements",children:"Prepared Statements"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'// SQLite prepared statements\r\nclass SqliteDatabaseAdapter extends DatabaseAdapter {\r\n  private statements = new Map<string, Statement>();\r\n\r\n  prepareStatement(sql: string): Statement {\r\n    let stmt = this.statements.get(sql);\r\n    if (!stmt) {\r\n      stmt = this.db.prepare(sql);\r\n      this.statements.set(sql, stmt);\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  // Use prepared statements\r\n  async getMemoryById(id: UUID): Promise<Memory | null> {\r\n    const stmt = this.prepareStatement("SELECT * FROM memories WHERE id = ?");\r\n    const memory = stmt.get(id);\r\n    return memory\r\n      ? {\r\n          ...memory,\r\n          content: JSON.parse(memory.content),\r\n        }\r\n      : null;\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"batch-operations",children:"Batch Operations"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'// Batch memory creation\r\nasync createMemories(memories: Memory[], tableName: string) {\r\n  const client = await this.pool.connect();\r\n  try {\r\n    await client.query(\'BEGIN\');\r\n\r\n    const stmt = await client.prepare(\r\n      `INSERT INTO memories (\r\n        id, type, content, embedding, "userId",\r\n        "roomId", "agentId", "unique", "createdAt"\r\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)`\r\n    );\r\n\r\n    for (const memory of memories) {\r\n      await stmt.execute([\r\n        memory.id,\r\n        tableName,\r\n        JSON.stringify(memory.content),\r\n        memory.embedding,\r\n        memory.userId,\r\n        memory.roomId,\r\n        memory.agentId,\r\n        memory.unique ?? false,\r\n        memory.createdAt\r\n      ]);\r\n    }\r\n\r\n    await client.query(\'COMMIT\');\r\n  } catch (error) {\r\n    await client.query(\'ROLLBACK\');\r\n    throw error;\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'class DatabaseAdapter {\r\n  protected async withTransaction<T>(\r\n    callback: (client: PoolClient) => Promise<T>,\r\n  ): Promise<T> {\r\n    const client = await this.pool.connect();\r\n    try {\r\n      await client.query("BEGIN");\r\n      const result = await callback(client);\r\n      await client.query("COMMIT");\r\n      return result;\r\n    } catch (error) {\r\n      await client.query("ROLLBACK");\r\n      if (error instanceof DatabaseError) {\r\n        // Handle specific database errors\r\n        if (error.code === "23505") {\r\n          throw new UniqueViolationError(error);\r\n        }\r\n      }\r\n      throw error;\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"extension-points",children:"Extension Points"}),"\n",(0,s.jsx)(r.h3,{id:"custom-adapter-implementation",children:"Custom Adapter Implementation"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class CustomDatabaseAdapter extends DatabaseAdapter {\r\n  constructor(config: CustomConfig) {\r\n    super();\r\n    // Initialize custom database connection\r\n  }\r\n\r\n  // Implement required methods\r\n  async createMemory(memory: Memory, tableName: string): Promise<void> {\r\n    // Custom implementation\r\n  }\r\n\r\n  async searchMemories(params: SearchParams): Promise<Memory[]> {\r\n    // Custom implementation\r\n  }\r\n\r\n  // Add custom functionality\r\n  async customOperation(): Promise<void> {\r\n    // Custom database operation\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Connection Management"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Use connection pooling for PostgreSQL"}),"\n",(0,s.jsx)(r.li,{children:"Handle connection failures gracefully"}),"\n",(0,s.jsx)(r.li,{children:"Implement proper cleanup"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Transaction Handling"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Use transactions for atomic operations"}),"\n",(0,s.jsx)(r.li,{children:"Implement proper rollback handling"}),"\n",(0,s.jsx)(r.li,{children:"Manage nested transactions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Error Handling"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Implement specific error types"}),"\n",(0,s.jsx)(r.li,{children:"Handle constraint violations"}),"\n",(0,s.jsx)(r.li,{children:"Provide meaningful error messages"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Resource Management"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Close connections properly"}),"\n",(0,s.jsx)(r.li,{children:"Clean up prepared statements"}),"\n",(0,s.jsx)(r.li,{children:"Monitor connection pools"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/api",children:"Database Schema Reference"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"../../packages/core",children:"Error Handling"})}),"\n"]})]})}function m(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var a=n(96540);const s={},t=a.createContext(s);function i(e){const r=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(t.Provider,{value:r},e.children)}}}]);