"use strict";(self.webpackChunkokai_docs=self.webpackChunkokai_docs||[]).push([[66328],{23235:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"packages/agents","title":"\ud83e\udd16 Agent Package","description":"Overview","source":"@site/docs/packages/agents.md","sourceDirName":"packages","slug":"/packages/agents","permalink":"/okai/docs/packages/agents","draft":false,"unlisted":false,"editUrl":"https://github.com/okcashpro/okai/tree/main/docs/docs/packages/agents.md","tags":[],"version":"current","frontMatter":{}}');var t=n(74848),i=n(28453);const s={},c="\ud83e\udd16 Agent Package",l={},o=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Core Components",id:"core-components",level:2},{value:"Agent Creation",id:"agent-creation",level:3},{value:"Character Loading",id:"character-loading",level:3},{value:"Client Initialization",id:"client-initialization",level:3},{value:"Database Management",id:"database-management",level:2},{value:"Token Management",id:"token-management",level:2},{value:"Agent Lifecycle Management",id:"agent-lifecycle-management",level:2},{value:"Starting Agents",id:"starting-agents",level:3},{value:"Shell Interface",id:"shell-interface",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Plugin Management",id:"plugin-management",level:3},{value:"Character Hot Reloading",id:"character-hot-reloading",level:3},{value:"Multi-Agent Coordination",id:"multi-agent-coordination",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Character Management",id:"character-management",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Resource Management",id:"resource-management",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Related Resources",id:"related-resources",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"-agent-package",children:"\ud83e\udd16 Agent Package"})}),"\n",(0,t.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(r.p,{children:["The Agent Package (",(0,t.jsx)(r.code,{children:"@okai/agent"}),") provides the high-level orchestration layer for OKai, managing agent lifecycles, character loading, client initialization, and runtime coordination."]}),"\n",(0,t.jsx)(r.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"pnpm add @okai/agent\n"})}),"\n",(0,t.jsx)(r.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'import { startAgents, loadCharacters } from "@okai/agent";\r\n\r\n// Start agents with default or custom characters\r\nconst args = parseArguments();\r\nconst characters = await loadCharacters(args.characters);\r\n\r\n// Initialize agents\r\nawait startAgents();\n'})}),"\n",(0,t.jsx)(r.h2,{id:"core-components",children:"Core Components"}),"\n",(0,t.jsx)(r.h3,{id:"agent-creation",children:"Agent Creation"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"export async function createAgent(\r\n  character: Character,\r\n  db: IDatabaseAdapter,\r\n  token: string,\r\n): Promise<AgentRuntime> {\r\n  return new AgentRuntime({\r\n    databaseAdapter: db,\r\n    token,\r\n    modelProvider: character.modelProvider,\r\n    character,\r\n    plugins: [\r\n      bootstrapPlugin,\r\n      nodePlugin,\r\n      // Conditional plugins\r\n      character.settings.secrets.WALLET_PUBLIC_KEY ? solanaPlugin : null,\r\n    ].filter(Boolean),\r\n    providers: [],\r\n    actions: [],\r\n    services: [],\r\n    managers: [],\r\n  });\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"character-loading",children:"Character Loading"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'export async function loadCharacters(\r\n  charactersArg: string,\r\n): Promise<Character[]> {\r\n  // Parse character paths\r\n  let characterPaths = charactersArg\r\n    ?.split(",")\r\n    .map((path) => path.trim())\r\n    .map((path) => normalizePath(path));\r\n\r\n  const loadedCharacters = [];\r\n\r\n  // Load each character file\r\n  for (const path of characterPaths) {\r\n    try {\r\n      const character = JSON.parse(fs.readFileSync(path, "utf8"));\r\n\r\n      // Load plugins if specified\r\n      if (character.plugins) {\r\n        character.plugins = await loadPlugins(character.plugins);\r\n      }\r\n\r\n      loadedCharacters.push(character);\r\n    } catch (error) {\r\n      console.error(`Error loading character from ${path}: ${error}`);\r\n    }\r\n  }\r\n\r\n  // Fall back to default character if none loaded\r\n  if (loadedCharacters.length === 0) {\r\n    loadedCharacters.push(defaultCharacter);\r\n  }\r\n\r\n  return loadedCharacters;\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"client-initialization",children:"Client Initialization"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"export async function initializeClients(\r\n  character: Character,\r\n  runtime: IAgentRuntime,\r\n) {\r\n  const clients = [];\r\n  const clientTypes = character.clients?.map((str) => str.toLowerCase()) || [];\r\n\r\n  if (clientTypes.includes(Clients.DISCORD)) {\r\n    clients.push(await DiscordClientInterface.start(runtime));\r\n  }\r\n  if (clientTypes.includes(Clients.TELEGRAM)) {\r\n    clients.push(await TelegramClientInterface.start(runtime));\r\n  }\r\n  if (clientTypes.includes(Clients.TWITTER)) {\r\n    clients.push(await TwitterClientInterface.start(runtime));\r\n  }\r\n  if (clientTypes.includes(Clients.DIRECT)) {\r\n    clients.push(await AutoClientInterface.start(runtime));\r\n  }\r\n\r\n  return clients;\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"database-management",children:"Database Management"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'function initializeDatabase(): IDatabaseAdapter {\r\n  // Use PostgreSQL if URL provided\r\n  if (process.env.POSTGRES_URL) {\r\n    return new PostgresDatabaseAdapter({\r\n      connectionString: process.env.POSTGRES_URL,\r\n    });\r\n  }\r\n\r\n  // Fall back to SQLite\r\n  return new SqliteDatabaseAdapter(new Database("./db.sqlite"));\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"token-management",children:"Token Management"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"export function getTokenForProvider(\r\n  provider: ModelProviderName,\r\n  character: Character,\r\n) {\r\n  switch (provider) {\r\n    case ModelProviderName.OPENAI:\r\n      return (\r\n        character.settings?.secrets?.OPENAI_API_KEY || settings.OPENAI_API_KEY\r\n      );\r\n\r\n    case ModelProviderName.ANTHROPIC:\r\n      return (\r\n        character.settings?.secrets?.ANTHROPIC_API_KEY ||\r\n        character.settings?.secrets?.CLAUDE_API_KEY ||\r\n        settings.ANTHROPIC_API_KEY\r\n      );\r\n\r\n    // Handle other providers...\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"agent-lifecycle-management",children:"Agent Lifecycle Management"}),"\n",(0,t.jsx)(r.h3,{id:"starting-agents",children:"Starting Agents"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"async function startAgent(character: Character, directClient: any) {\r\n  try {\r\n    // Get provider token\r\n    const token = getTokenForProvider(character.modelProvider, character);\r\n\r\n    // Initialize database\r\n    const db = initializeDatabase();\r\n\r\n    // Create runtime\r\n    const runtime = await createAgent(character, db, token);\r\n\r\n    // Initialize clients\r\n    const clients = await initializeClients(character, runtime);\r\n\r\n    // Register with direct client\r\n    directClient.registerAgent(runtime);\r\n\r\n    return clients;\r\n  } catch (error) {\r\n    console.error(\r\n      `Error starting agent for character ${character.name}:`,\r\n      error,\r\n    );\r\n    throw error;\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"shell-interface",children:"Shell Interface"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'const rl = readline.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout,\r\n});\r\n\r\nasync function handleUserInput(input, agentId) {\r\n  if (input.toLowerCase() === "exit") {\r\n    rl.close();\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `http://localhost:${serverPort}/${agentId}/message`,\r\n      {\r\n        method: "POST",\r\n        headers: {\r\n          "Content-Type": "application/json",\r\n        },\r\n        body: JSON.stringify({\r\n          text: input,\r\n          userId: "user",\r\n          userName: "User",\r\n        }),\r\n      },\r\n    );\r\n\r\n    const data = await response.json();\r\n    data.forEach((message) => console.log(`Agent: ${message.text}`));\r\n  } catch (error) {\r\n    console.error("Error:", error);\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(r.h3,{id:"plugin-management",children:"Plugin Management"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"async function loadPlugins(pluginPaths: string[]) {\r\n  return await Promise.all(\r\n    pluginPaths.map(async (plugin) => {\r\n      const importedPlugin = await import(plugin);\r\n      return importedPlugin;\r\n    }),\r\n  );\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"character-hot-reloading",children:"Character Hot Reloading"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'async function reloadCharacter(runtime: IAgentRuntime, characterPath: string) {\r\n  // Load new character\r\n  const character = JSON.parse(fs.readFileSync(characterPath, "utf8"));\r\n\r\n  // Update runtime\r\n  runtime.character = character;\r\n\r\n  // Reload plugins\r\n  if (character.plugins) {\r\n    const plugins = await loadPlugins(character.plugins);\r\n    runtime.registerPlugins(plugins);\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"multi-agent-coordination",children:"Multi-Agent Coordination"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"class AgentCoordinator {\r\n  private agents: Map<string, IAgentRuntime>;\r\n\r\n  async broadcast(message: Memory) {\r\n    const responses = await Promise.all(\r\n      Array.from(this.agents.values()).map((agent) =>\r\n        agent.processMessage(message),\r\n      ),\r\n    );\r\n    return responses;\r\n  }\r\n\r\n  async coordinate(agents: string[], task: Task) {\r\n    // Coordinate multiple agents on a task\r\n    const selectedAgents = agents.map((id) => this.agents.get(id));\r\n\r\n    return await this.executeCoordinatedTask(selectedAgents, task);\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(r.h3,{id:"character-management",children:"Character Management"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'// Validate character before loading\r\nfunction validateCharacter(character: Character) {\r\n  if (!character.name) {\r\n    throw new Error("Character must have a name");\r\n  }\r\n\r\n  if (!character.modelProvider) {\r\n    throw new Error("Model provider must be specified");\r\n  }\r\n}\r\n\r\n// Use character versioning\r\nconst character = {\r\n  name: "Agent",\r\n  version: "1.0.0",\r\n  // ...\r\n};\n'})}),"\n",(0,t.jsx)(r.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'async function handleAgentError(error: Error, character: Character) {\r\n  // Log error with context\r\n  console.error(`Agent ${character.name} error:`, error);\r\n\r\n  // Attempt recovery\r\n  if (error.code === "TOKEN_EXPIRED") {\r\n    await refreshToken(character);\r\n  }\r\n\r\n  // Notify monitoring\r\n  await notify({\r\n    level: "error",\r\n    character: character.name,\r\n    error,\r\n  });\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"class ResourceManager {\r\n  async cleanup() {\r\n    // Close database connections\r\n    await this.db.close();\r\n\r\n    // Shutdown clients\r\n    await Promise.all(this.clients.map((client) => client.stop()));\r\n\r\n    // Clear caches\r\n    this.cache.clear();\r\n  }\r\n\r\n  async monitor() {\r\n    // Monitor resource usage\r\n    const usage = process.memoryUsage();\r\n    if (usage.heapUsed > threshold) {\r\n      await this.cleanup();\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(r.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:"Character Loading Failures"})}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'try {\r\n  await loadCharacters(charactersArg);\r\n} catch (error) {\r\n  if (error.code === "ENOENT") {\r\n    console.error("Character file not found");\r\n  } else if (error instanceof SyntaxError) {\r\n    console.error("Invalid character JSON");\r\n  }\r\n}\n'})}),"\n",(0,t.jsxs)(r.ol,{start:"2",children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:"Client Initialization Errors"})}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'async function handleClientError(error: Error) {\r\n  if (error.message.includes("rate limit")) {\r\n    await wait(exponentialBackoff());\r\n  } else if (error.message.includes("auth")) {\r\n    await refreshAuth();\r\n  }\r\n}\n'})}),"\n",(0,t.jsxs)(r.ol,{start:"3",children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:"Database Connection Issues"})}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'async function handleDbError(error: Error) {\r\n  if (error.message.includes("connection")) {\r\n    await reconnectDb();\r\n  } else if (error.message.includes("locked")) {\r\n    await waitForLock();\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#",children:"Character Creation Guide"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#",children:"Client Configuration"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#",children:"Plugin Development"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"../packages/agents",children:"Multi-Agent Setup"})}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>c});var a=n(96540);const t={},i=a.createContext(t);function s(e){const r=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:r},e.children)}}}]);