"use strict";(self.webpackChunkokai_docs=self.webpackChunkokai_docs||[]).push([[14482],{60187:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"packages/core","title":"\ud83d\udce6 Core Package","description":"Overview","source":"@site/docs/packages/core.md","sourceDirName":"packages","slug":"/packages/core","permalink":"/okai/docs/packages/core","draft":false,"unlisted":false,"editUrl":"https://github.com/okcashpro/okai/tree/main/docs/docs/packages/core.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/okai/docs/packages/"},"next":{"title":"Database Adapters","permalink":"/okai/docs/packages/adapters"}}');var a=r(74848),s=r(28453);const i={sidebar_position:1},o="\ud83d\udce6 Core Package",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Key Components",id:"key-components",level:2},{value:"AgentRuntime",id:"agentruntime",level:3},{value:"Memory System",id:"memory-system",level:3},{value:"Context System",id:"context-system",level:3},{value:"Action System",id:"action-system",level:3},{value:"Evaluation System",id:"evaluation-system",level:3},{value:"State Management",id:"state-management",level:3},{value:"Service Architecture",id:"service-architecture",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Memory Management",id:"memory-management",level:3},{value:"State Composition",id:"state-composition",level:3},{value:"Service Management",id:"service-management",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Custom Memory Types",id:"custom-memory-types",level:3},{value:"Enhanced Embeddings",id:"enhanced-embeddings",level:3},{value:"State Persistence",id:"state-persistence",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"-core-package",children:"\ud83d\udce6 Core Package"})}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["The Core Package (",(0,a.jsx)(n.code,{children:"@okcashpro/core"}),") provides the fundamental building blocks of OKai's architecture, handling essential functionalities like:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Memory Management & Semantic Search"}),"\n",(0,a.jsx)(n.li,{children:"Message Processing & Generation"}),"\n",(0,a.jsx)(n.li,{children:"Runtime Environment & State Management"}),"\n",(0,a.jsx)(n.li,{children:"Action & Evaluator Systems"}),"\n",(0,a.jsx)(n.li,{children:"Provider Integration & Context Composition"}),"\n",(0,a.jsx)(n.li,{children:"Service Infrastructure"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pnpm add @okcashpro/core\n"})}),"\n",(0,a.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,a.jsx)(n.h3,{id:"agentruntime",children:"AgentRuntime"}),"\n",(0,a.jsx)(n.p,{children:"The AgentRuntime class serves as the central nervous system of OKai, orchestrating all major components:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { AgentRuntime } from "@okcashpro/core";\r\n\r\nconst runtime = new AgentRuntime({\r\n  // Core configuration\r\n  databaseAdapter,\r\n  token,\r\n  modelProvider: ModelProviderName.OPENAI,\r\n  character,\r\n\r\n  // Extension points\r\n  plugins: [bootstrapPlugin, nodePlugin],\r\n  providers: [],\r\n  actions: [],\r\n  services: [],\r\n  managers: [],\r\n\r\n  // Optional settings\r\n  conversationLength: 32,\r\n  agentId: customId,\r\n  fetch: customFetch,\r\n});\n'})}),"\n",(0,a.jsx)(n.p,{children:"Key capabilities:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"State composition and management"}),"\n",(0,a.jsx)(n.li,{children:"Plugin and service registration"}),"\n",(0,a.jsx)(n.li,{children:"Memory and relationship management"}),"\n",(0,a.jsx)(n.li,{children:"Action processing and evaluation"}),"\n",(0,a.jsx)(n.li,{children:"Message generation and handling"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"memory-system",children:"Memory System"}),"\n",(0,a.jsx)(n.p,{children:"The MemoryManager handles persistent storage and retrieval of context-aware information:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"class MemoryManager implements IMemoryManager {\r\n  runtime: IAgentRuntime;\r\n  tableName: string;\r\n\r\n  // Create new memories with embeddings\r\n  async createMemory(memory: Memory, unique = false): Promise<void> {\r\n    if (!memory.embedding) {\r\n      memory.embedding = await embed(this.runtime, memory.content.text);\r\n    }\r\n\r\n    await this.runtime.databaseAdapter.createMemory(\r\n      memory,\r\n      this.tableName,\r\n      unique,\r\n    );\r\n  }\r\n\r\n  // Semantic search with embeddings\r\n  async searchMemoriesByEmbedding(\r\n    embedding: number[],\r\n    opts: {\r\n      match_threshold?: number;\r\n      count?: number;\r\n      roomId: UUID;\r\n      unique?: boolean;\r\n    },\r\n  ): Promise<Memory[]> {\r\n    return this.runtime.databaseAdapter.searchMemories({\r\n      tableName: this.tableName,\r\n      roomId: opts.roomId,\r\n      embedding,\r\n      match_threshold: opts.match_threshold ?? 0.8,\r\n      match_count: opts.count ?? 10,\r\n      unique: opts.unique ?? false,\r\n    });\r\n  }\r\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"context-system",children:"Context System"}),"\n",(0,a.jsx)(n.p,{children:"The context system manages state composition and template handling:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Template composition\r\nexport const composeContext = ({\r\n  state,\r\n  template,\r\n}: {\r\n  state: State;\r\n  template: string;\r\n}): string => {\r\n  return template.replace(/{{\\w+}}/g, (match) => {\r\n    const key = match.replace(/{{|}}/g, "");\r\n    return state[key] ?? "";\r\n  });\r\n};\r\n\r\n// Header handling\r\nexport const addHeader = (header: string, body: string): string => {\r\n  return body.length > 0 ? `${header ? header + "\\n" : header}${body}\\n` : "";\r\n};\n'})}),"\n",(0,a.jsx)(n.h3,{id:"action-system",children:"Action System"}),"\n",(0,a.jsx)(n.p,{children:"Actions define the available behaviors and responses:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'interface Action {\r\n  name: string;\r\n  similes: string[];\r\n  description: string;\r\n  examples: MessageExample[][];\r\n\r\n  validate: (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state?: State,\r\n  ) => Promise<boolean>;\r\n\r\n  handler: (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state?: State,\r\n    options?: any,\r\n    callback?: HandlerCallback,\r\n  ) => Promise<void>;\r\n}\r\n\r\n// Example action implementation\r\nconst generateImageAction: Action = {\r\n  name: "GENERATE_IMAGE",\r\n  similes: ["CREATE_IMAGE", "MAKE_PICTURE"],\r\n  description: "Generate an AI image from text",\r\n\r\n  validate: async (runtime, message) => {\r\n    return (\r\n      !!runtime.getSetting("ANTHROPIC_API_KEY") &&\r\n      !!runtime.getSetting("TOGETHER_API_KEY")\r\n    );\r\n  },\r\n\r\n  handler: async (runtime, message, state, options, callback) => {\r\n    const images = await generateImage(\r\n      { prompt: message.content.text },\r\n      runtime,\r\n    );\r\n\r\n    const captions = await Promise.all(\r\n      images.data.map((image) => generateCaption({ imageUrl: image }, runtime)),\r\n    );\r\n\r\n    callback?.(\r\n      {\r\n        text: "Generated images",\r\n        attachments: images.data.map((image, i) => ({\r\n          id: crypto.randomUUID(),\r\n          url: image,\r\n          title: "Generated image",\r\n          description: captions[i].title,\r\n        })),\r\n      },\r\n      [],\r\n    );\r\n  },\r\n};\n'})}),"\n",(0,a.jsx)(n.h3,{id:"evaluation-system",children:"Evaluation System"}),"\n",(0,a.jsx)(n.p,{children:"Evaluators assess messages and guide agent behavior:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'interface Evaluator {\r\n  name: string;\r\n  similes: string[];\r\n  alwaysRun?: boolean;\r\n\r\n  validate: (\r\n    runtime: IAgentRuntime,\r\n    message: Memory,\r\n    state?: State,\r\n  ) => Promise<boolean>;\r\n\r\n  handler: (runtime: IAgentRuntime, message: Memory) => Promise<void>;\r\n}\r\n\r\n// Example evaluator\r\nconst factEvaluator: Evaluator = {\r\n  name: "EVALUATE_FACTS",\r\n  similes: ["CHECK_FACTS"],\r\n  alwaysRun: true,\r\n\r\n  validate: async (runtime, message) => {\r\n    return message.content.text.includes("fact:");\r\n  },\r\n\r\n  handler: async (runtime, message) => {\r\n    const facts = await runtime.loreManager.searchMemories({\r\n      text: message.content.text,\r\n      threshold: 0.8,\r\n    });\r\n\r\n    if (facts.length > 0) {\r\n      await runtime.messageManager.createMemory({\r\n        content: {\r\n          text: `Verified fact: ${facts[0].content.text}`,\r\n        },\r\n        roomId: message.roomId,\r\n        userId: runtime.agentId,\r\n      });\r\n    }\r\n  },\r\n};\n'})}),"\n",(0,a.jsx)(n.h3,{id:"state-management",children:"State Management"}),"\n",(0,a.jsx)(n.p,{children:"The state system maintains conversation context and agent knowledge:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"interface State {\r\n  // Agent identity\r\n  agentId: UUID;\r\n  agentName: string;\r\n  bio: string;\r\n  lore: string;\r\n  adjective?: string;\r\n\r\n  // Conversation context\r\n  senderName?: string;\r\n  actors: string;\r\n  actorsData: Actor[];\r\n  recentMessages: string;\r\n  recentMessagesData: Memory[];\r\n\r\n  // Objectives\r\n  goals: string;\r\n  goalsData: Goal[];\r\n\r\n  // Behavioral guidance\r\n  actions: string;\r\n  actionNames: string;\r\n  evaluators: string;\r\n  evaluatorNames: string;\r\n\r\n  // Additional context\r\n  providers: string;\r\n  attachments: string;\r\n  characterPostExamples?: string;\r\n  characterMessageExamples?: string;\r\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"service-architecture",children:"Service Architecture"}),"\n",(0,a.jsx)(n.p,{children:"The core implements a service-based architecture:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Service base class\r\nclass Service {\r\n  static serviceType: ServiceType;\r\n\r\n  async initialize(\r\n    device: string | null,\r\n    runtime: IAgentRuntime,\r\n  ): Promise<void>;\r\n}\r\n\r\n// Service registry\r\nclass ServiceRegistry {\r\n  private services = new Map<ServiceType, Service>();\r\n\r\n  registerService(service: Service): void {\r\n    const type = (service as typeof Service).serviceType;\r\n    if (this.services.has(type)) {\r\n      console.warn(`Service ${type} already registered`);\r\n      return;\r\n    }\r\n    this.services.set(type, service);\r\n  }\r\n\r\n  getService<T>(type: ServiceType): T | null {\r\n    return (this.services.get(type) as T) || null;\r\n  }\r\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Use unique flags for important memories\r\nawait memoryManager.createMemory(memory, true);\r\n\r\n// Search with appropriate thresholds\r\nconst similar = await memoryManager.searchMemoriesByEmbedding(embedding, {\r\n  match_threshold: 0.8,\r\n  count: 10,\r\n});\r\n\r\n// Clean up old memories periodically\r\nawait memoryManager.removeAllMemories(roomId, tableName);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"state-composition",children:"State Composition"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Compose full state\r\nconst state = await runtime.composeState(message, {\r\n  additionalContext: "Custom context",\r\n});\r\n\r\n// Update with recent messages\r\nconst updatedState = await runtime.updateRecentMessageState(state);\r\n\r\n// Add custom providers\r\nstate.providers = addHeader(\r\n  "# Additional Information",\r\n  await Promise.all(providers.map((p) => p.get(runtime, message))).join("\\n"),\r\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"service-management",children:"Service Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Service initialization\r\nclass CustomService extends Service {\r\n  static serviceType = ServiceType.CUSTOM;\r\n\r\n  async initialize(device: string | null, runtime: IAgentRuntime) {\r\n    await this.setupDependencies();\r\n    await this.validateConfig();\r\n    await this.connect();\r\n  }\r\n\r\n  async cleanup() {\r\n    await this.disconnect();\r\n    await this.clearResources();\r\n  }\r\n}\r\n\r\n// Service registration\r\nruntime.registerService(new CustomService());\r\n\r\n// Service usage\r\nconst service = runtime.getService<CustomService>(ServiceType.CUSTOM);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.p,{children:"Implement proper error handling throughout:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'try {\r\n  await runtime.processActions(message, responses, state);\r\n} catch (error) {\r\n  if (error instanceof TokenError) {\r\n    await this.refreshToken();\r\n  } else if (error instanceof DatabaseError) {\r\n    await this.reconnectDatabase();\r\n  } else {\r\n    console.error("Unexpected error:", error);\r\n    throw error;\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,a.jsx)(n.h3,{id:"custom-memory-types",children:"Custom Memory Types"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Create specialized memory managers\r\nclass DocumentMemoryManager extends MemoryManager {\r\n  constructor(runtime: IAgentRuntime) {\r\n    super({\r\n      runtime,\r\n      tableName: "documents",\r\n      useCache: true,\r\n    });\r\n  }\r\n\r\n  async processDocument(doc: Document): Promise<void> {\r\n    const chunks = await splitChunks(doc.content);\r\n\r\n    for (const chunk of chunks) {\r\n      await this.createMemory({\r\n        content: { text: chunk },\r\n        metadata: {\r\n          documentId: doc.id,\r\n          section: chunk.section,\r\n        },\r\n      });\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"enhanced-embeddings",children:"Enhanced Embeddings"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Advanced embedding handling\r\nasync function enhancedEmbed(\r\n  runtime: IAgentRuntime,\r\n  text: string,\r\n  opts: {\r\n    model?: string;\r\n    dimensions?: number;\r\n    pooling?: "mean" | "max";\r\n  },\r\n): Promise<number[]> {\r\n  // Get cached embedding if available\r\n  const cached = await runtime.databaseAdapter.getCachedEmbeddings({\r\n    query_input: text,\r\n    query_threshold: 0.95,\r\n  });\r\n\r\n  if (cached.length > 0) {\r\n    return cached[0].embedding;\r\n  }\r\n\r\n  // Generate new embedding\r\n  return embed(runtime, text, opts);\r\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"state-persistence",children:"State Persistence"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'class StateManager {\r\n  async saveState(state: State): Promise<void> {\r\n    await this.runtime.databaseAdapter.createMemory(\r\n      {\r\n        content: {\r\n          type: "state",\r\n          data: state,\r\n        },\r\n        roomId: state.roomId,\r\n        userId: state.agentId,\r\n      },\r\n      "states",\r\n    );\r\n  }\r\n\r\n  async loadState(roomId: UUID): Promise<State | null> {\r\n    const states = await this.runtime.databaseAdapter.getMemories({\r\n      roomId,\r\n      tableName: "states",\r\n      count: 1,\r\n    });\r\n\r\n    return states[0]?.content.data || null;\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/api/classes/AgentRuntime",children:"API Reference"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(96540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);