"use strict";(self.webpackChunkokai_docs=self.webpackChunkokai_docs||[]).push([[75028],{96755:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guides/local-development","title":"\ud83d\udcbb Local Development Guide","description":"This guide covers setting up and working with OKai in a development environment.","source":"@site/docs/guides/local-development.md","sourceDirName":"guides","slug":"/guides/local-development","permalink":"/okai/docs/guides/local-development","draft":false,"unlisted":false,"editUrl":"https://github.com/okcashpro/okai/tree/main/docs/docs/guides/local-development.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"tutorialSidebar","previous":{"title":"Secrets Management","permalink":"/okai/docs/guides/secrets-management"},"next":{"title":"WSL Setup","permalink":"/okai/docs/guides/wsl"}}');var s=r(74848),t=r(28453);const l={sidebar_position:12},a="\ud83d\udcbb Local Development Guide",o={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Initial Setup",id:"initial-setup",level:2},{value:"1. Repository Setup",id:"1-repository-setup",level:3},{value:"2. Environment Configuration",id:"2-environment-configuration",level:3},{value:"3. Local Model Setup",id:"3-local-model-setup",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"Running the Development Server",id:"running-the-development-server",level:3},{value:"Development Commands",id:"development-commands",level:3},{value:"Direct Client Chat UI",id:"direct-client-chat-ui",level:3},{value:"Database Development",id:"database-development",level:2},{value:"SQLite (Recommended for Development)",id:"sqlite-recommended-for-development",level:3},{value:"In-Memory Database (for Testing)",id:"in-memory-database-for-testing",level:3},{value:"Schema Management",id:"schema-management",level:3},{value:"Testing",id:"testing",level:2},{value:"Running Tests",id:"running-tests",level:3},{value:"Writing Tests",id:"writing-tests",level:3},{value:"Plugin Development",id:"plugin-development",level:2},{value:"Creating a New Plugin",id:"creating-a-new-plugin",level:3},{value:"Custom Action Development",id:"custom-action-development",level:3},{value:"Debugging",id:"debugging",level:2},{value:"VS Code Configuration",id:"vs-code-configuration",level:3},{value:"Debugging Tips",id:"debugging-tips",level:3},{value:"Common Development Tasks",id:"common-development-tasks",level:2},{value:"1. Adding a New Character",id:"1-adding-a-new-character",level:3},{value:"2. Creating Custom Services",id:"2-creating-custom-services",level:3},{value:"3. Working with Models",id:"3-working-with-models",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"CUDA Setup",id:"cuda-setup",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Development Tools",id:"development-tools",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Additional Tools",id:"additional-tools",level:2},{value:"Character Development",id:"character-development",level:3},{value:"Development Scripts",id:"development-scripts",level:3},{value:"Further Resources",id:"further-resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-local-development-guide",children:"\ud83d\udcbb Local Development Guide"})}),"\n",(0,s.jsx)(n.p,{children:"This guide covers setting up and working with OKai in a development environment."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"Before you begin, ensure you have:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Required\r\nNode.js 23+\r\npnpm\r\nGit\r\n\r\n# Optional but recommended\r\nVS Code\r\nDocker (for database development)\r\nCUDA Toolkit (for GPU acceleration)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"initial-setup",children:"Initial Setup"}),"\n",(0,s.jsx)(n.h3,{id:"1-repository-setup",children:"1. Repository Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Clone the repository\r\ngit clone https://github.com/okcashpro/okai.git\r\ncd okai\r\n\r\n# Install dependencies\r\npnpm install\r\n\r\n# Install optional dependencies\r\npnpm install --include=optional sharp\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-environment-configuration",children:"2. Environment Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Create your development environment file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cp .env.example .env\n"})}),"\n",(0,s.jsx)(n.p,{children:"Configure essential development variables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Minimum required for local development\r\nOPENAI_API_KEY=sk-*           # Optional, for OpenAI features\r\nX_SERVER_URL=                 # Leave blank for local inference\r\nXAI_API_KEY=                 # Leave blank for local inference\r\nXAI_MODEL=meta-llama/Llama-3.1-7b-instruct  # Local model\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-local-model-setup",children:"3. Local Model Setup"}),"\n",(0,s.jsx)(n.p,{children:"For local inference without API dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install CUDA support for NVIDIA GPUs\r\nnpx --no node-llama-cpp source download --gpu cuda\r\n\r\n# The system will automatically download models from\r\n# Hugging Face on first run\n"})}),"\n",(0,s.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,s.jsx)(n.h3,{id:"running-the-development-server",children:"Running the Development Server"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Start with default character\r\npnpm run dev\r\n\r\n# Start with specific character\r\npnpm run dev --characters="characters/my-character.json"\r\n\r\n# Start with multiple characters\r\npnpm run dev --characters="characters/char1.json,characters/char2.json"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"development-commands",children:"Development Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm run build          # Build the project\r\npnpm run clean         # Clean build artifacts\r\npnpm run dev           # Start development server\r\npnpm run test          # Run tests\r\npnpm run test:watch    # Run tests in watch mode\r\npnpm run lint          # Lint code\n"})}),"\n",(0,s.jsx)(n.h3,{id:"direct-client-chat-ui",children:"Direct Client Chat UI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'# Open a terminal and Start with specific character\r\npnpm run dev --characters="characters/my-character.json"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Open a 2nd terminal and start the client\r\npnpm start:client\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Look for the message:\r\n",(0,s.jsx)(n.code,{children:"  \u279c  Local:   http://localhost:5173/"}),"\r\nClick on that link or open a browser window to that location.  Once you do that you should see the chat interface connect with the system and you can start interacting with your character."]}),"\n",(0,s.jsx)(n.h2,{id:"database-development",children:"Database Development"}),"\n",(0,s.jsx)(n.h3,{id:"sqlite-recommended-for-development",children:"SQLite (Recommended for Development)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { SqliteDatabaseAdapter } from "@okcashpro/okai/adapters";\r\nimport Database from "better-sqlite3";\r\n\r\nconst db = new SqliteDatabaseAdapter(new Database("./dev.db"));\n'})}),"\n",(0,s.jsx)(n.h3,{id:"in-memory-database-for-testing",children:"In-Memory Database (for Testing)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { SqlJsDatabaseAdapter } from "@okcashpro/okai/adapters";\r\n\r\nconst db = new SqlJsDatabaseAdapter(new Database(":memory:"));\n'})}),"\n",(0,s.jsx)(n.h3,{id:"schema-management",children:"Schema Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create new migration\r\npnpm run migration:create\r\n\r\n# Run migrations\r\npnpm run migration:up\r\n\r\n# Rollback migrations\r\npnpm run migration:down\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.h3,{id:"running-tests",children:"Running Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run all tests\r\npnpm test\r\n\r\n# Run specific test file\r\npnpm test tests/specific.test.ts\r\n\r\n# Run tests with coverage\r\npnpm test:coverage\r\n\r\n# Run database-specific tests\r\npnpm test:sqlite\r\npnpm test:sqljs\n"})}),"\n",(0,s.jsx)(n.h3,{id:"writing-tests",children:"Writing Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { runAiTest } from "@okcashpro/okai/test_resources";\r\n\r\ndescribe("Feature Test", () => {\r\n  beforeEach(async () => {\r\n    // Setup test environment\r\n  });\r\n\r\n  it("should perform expected behavior", async () => {\r\n    const result = await runAiTest({\r\n      messages: [\r\n        {\r\n          user: "user1",\r\n          content: { text: "test message" },\r\n        },\r\n      ],\r\n      expected: "expected response",\r\n    });\r\n    expect(result.success).toBe(true);\r\n  });\r\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"plugin-development",children:"Plugin Development"}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-new-plugin",children:"Creating a New Plugin"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// plugins/my-plugin/src/index.ts\r\nimport { Plugin } from "@okcashpro/okai/types";\r\n\r\nexport const myPlugin: Plugin = {\r\n  name: "my-plugin",\r\n  description: "My custom plugin",\r\n  actions: [],\r\n  evaluators: [],\r\n  providers: [],\r\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-action-development",children:"Custom Action Development"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// plugins/my-plugin/src/actions/myAction.ts\r\nexport const myAction: Action = {\r\n  name: "MY_ACTION",\r\n  similes: ["SIMILAR_ACTION"],\r\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n    return true;\r\n  },\r\n  handler: async (runtime: IAgentRuntime, message: Memory) => {\r\n    // Implementation\r\n    return true;\r\n  },\r\n  examples: [],\r\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,s.jsx)(n.h3,{id:"vs-code-configuration",children:"VS Code Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:".vscode/launch.json"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "version": "0.2.0",\r\n  "configurations": [\r\n    {\r\n      "type": "node",\r\n      "request": "launch",\r\n      "name": "Debug OKai",\r\n      "skipFiles": ["<node_internals>/**"],\r\n      "program": "${workspaceFolder}/src/index.ts",\r\n      "runtimeArgs": ["-r", "ts-node/register"],\r\n      "env": {\r\n        "DEBUG": "okai:*"\r\n      }\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Enable Debug Logging"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Add to your .env file\r\nDEBUG=okai:*\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Use Debug Points"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const debug = require("debug")("okai:dev");\r\n\r\ndebug("Operation details: %O", {\r\n  operation: "functionName",\r\n  params: parameters,\r\n  result: result,\r\n});\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Memory Debugging"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Increase Node.js memory for development\r\nNODE_OPTIONS="--max-old-space-size=8192" pnpm run dev\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-development-tasks",children:"Common Development Tasks"}),"\n",(0,s.jsx)(n.h3,{id:"1-adding-a-new-character",children:"1. Adding a New Character"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "DevBot",\r\n  "description": "Development testing bot",\r\n  "modelProvider": "openai",\r\n  "settings": {\r\n    "debug": true,\r\n    "logLevel": "debug"\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-creating-custom-services",children:"2. Creating Custom Services"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class CustomService extends Service {\r\n  static serviceType = ServiceType.CUSTOM;\r\n\r\n  async initialize() {\r\n    // Setup code\r\n  }\r\n\r\n  async process(input: any): Promise<any> {\r\n    // Service logic\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-working-with-models",children:"3. Working with Models"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Local model configuration\r\nconst localModel = {\r\n  modelProvider: "llamalocal",\r\n  settings: {\r\n    modelPath: "./models/llama-7b.gguf",\r\n    contextSize: 8192,\r\n  },\r\n};\r\n\r\n// Cloud model configuration\r\nconst cloudModel = {\r\n  modelProvider: "openai",\r\n  settings: {\r\n    model: "gpt-4o-mini",\r\n    temperature: 0.7,\r\n  },\r\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"cuda-setup",children:"CUDA Setup"}),"\n",(0,s.jsx)(n.p,{children:"For NVIDIA GPU users:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Install CUDA Toolkit with cuDNN and cuBLAS"}),"\n",(0,s.jsx)(n.li,{children:"Set environment variables:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"CUDA_PATH=/usr/local/cuda  # Windows: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0\n"})}),"\n",(0,s.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class MemoryManager {\r\n  private cache = new Map();\r\n  private maxSize = 1000;\r\n\r\n  async cleanup() {\r\n    if (this.cache.size > this.maxSize) {\r\n      // Implement cleanup logic\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Model Loading Issues"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Clear model cache\r\nrm -rf ./models/*\r\n# Restart with fresh download\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Database Connection Issues"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Test database connection\r\npnpm run test:db-connection\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Memory Issues"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check memory usage\r\nnode --trace-gc index.js\n"})}),"\n",(0,s.jsx)(n.h3,{id:"development-tools",children:"Development Tools"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Generate TypeScript documentation\r\npnpm run docs:generate\r\n\r\n# Check for circular dependencies\r\npnpm run madge\r\n\r\n# Analyze bundle size\r\npnpm run analyze\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Code Organization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Place custom actions in ",(0,s.jsx)(n.code,{children:"custom_actions/"})]}),"\n",(0,s.jsxs)(n.li,{children:["Keep character files in ",(0,s.jsx)(n.code,{children:"characters/"})]}),"\n",(0,s.jsxs)(n.li,{children:["Store test data in ",(0,s.jsx)(n.code,{children:"tests/fixtures/"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Testing Strategy"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Write unit tests for new features"}),"\n",(0,s.jsx)(n.li,{children:"Use integration tests for plugins"}),"\n",(0,s.jsx)(n.li,{children:"Test with multiple model providers"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Git Workflow"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create feature branches"}),"\n",(0,s.jsx)(n.li,{children:"Follow conventional commits"}),"\n",(0,s.jsx)(n.li,{children:"Keep PRs focused"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"additional-tools",children:"Additional Tools"}),"\n",(0,s.jsx)(n.h3,{id:"character-development",children:"Character Development"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Generate character from Twitter data\r\nnpx tweets2character\r\n\r\n# Convert documents to knowledge base\r\nnpx folder2knowledge <path/to/folder>\r\n\r\n# Add knowledge to character\r\nnpx knowledge2character <character-file> <knowledge-file>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"development-scripts",children:"Development Scripts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Analyze codebase\r\n./scripts/analyze-codebase.ts\r\n\r\n# Extract tweets for training\r\n./scripts/extracttweets.js\r\n\r\n# Clean build artifacts\r\n./scripts/clean.sh\n"})}),"\n",(0,s.jsx)(n.h2,{id:"further-resources",children:"Further Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/okai/docs/guides/configuration",children:"Configuration Guide"})," for setup details"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/okai/docs/guides/advanced",children:"Advanced Usage"})," for complex features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/api",children:"API Documentation"})," for complete API reference"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../community/contributing.md",children:"Contributing Guide"})," for contribution guidelines"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var i=r(96540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);