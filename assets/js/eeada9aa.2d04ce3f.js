"use strict";(self.webpackChunkokai_docs=self.webpackChunkokai_docs||[]).push([[54634],{80501:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Discord/collaborations/3d-ai-tv/chat_2024-12-09","title":"3d-ai-tv 2024-12-09","description":"Summary","source":"@site/community/Discord/collaborations/3d-ai-tv/chat_2024-12-09.md","sourceDirName":"Discord/collaborations/3d-ai-tv","slug":"/Discord/collaborations/3d-ai-tv/chat_2024-12-09","permalink":"/okai/community/Discord/collaborations/3d-ai-tv/chat_2024-12-09","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"3d-ai-tv 2024-12-08","permalink":"/okai/community/Discord/collaborations/3d-ai-tv/chat_2024-12-08"},"next":{"title":"agent-dev-school 2024-11-28","permalink":"/okai/community/Discord/development/agent-dev-school/chat_2024-11-28"}}');var s=t(74848),o=t(28453);const a={},r="3d-ai-tv 2024-12-09",d={},l=[{value:"Summary",id:"summary",level:2},{value:"FAQ",id:"faq",level:2},{value:"Who Helped Who",id:"who-helped-who",level:2},{value:"Action Items",id:"action-items",level:2},{value:"Technical Tasks",id:"technical-tasks",level:3},{value:"Feature Requests",id:"feature-requests",level:3}];function c(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"3d-ai-tv-2024-12-09",children:"3d-ai-tv 2024-12-09"})}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"The main technical discussion revolved around handling events in a specific order based on timestamps. Boom shared code for processing these events and managing their respective methods, while also addressing concerns about duplicate event calls during testing."}),"\n",(0,s.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"How is the timestamp management and method calling based on event type handled? Is there a need to run tests again or skip processed events in order? (asked by @SM Sith Lord)"}),"\n",(0,s.jsx)(n.li,{children:"Is another 'speakComplete' handling method needed, similar to prepareSceneCompleteEvent() ? (asked by @SM Sith Lord)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"who-helped-who",children:"Who Helped Who"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"@SM Sith Lord helped [Discord Channel Members] with Event Processing by providing Boom provided code for event processing and timestamp management."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"action-items",children:"Action Items"}),"\n",(0,s.jsx)(n.h3,{id:"technical-tasks",children:"Technical Tasks"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Setup local OKai homework and API setup on UE front by PENDINGREALITY. (mentioned by PENDINGREALITY)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"feature-requests",children:"Feature Requests"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement a method for handling 'speakComplete' events (mentioned by @SM Sith Lord)"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);